    import "io"
    import "heap"

    manifest {linkSize = 2, bufferSize = 100, data_i = 0, next_i = 1} // i = index

    let strdup(string) be {
        // string must have terminating null character

        let stringSize = strlen(string);
        let stringSizeWithNull = stringSize + 1;
        let cpy; 

        test not((stringSizeWithNull rem 4)) then {
            cpy := newvec(stringSizeWithNull / 4 );
        }
        else {
            cpy := newvec((stringSizeWithNull / 4 ) + 1);
        }

        //out("strdup string = %s, size = %d\n", string, stringSize);

        for i = 0 to stringSize do {
            byte i of cpy := byte i of string;
        }

        resultis cpy;
    }

    let strcmp(a, b) be {
        let i = 0;

        //out("entered strcmp, a = %s, b = %s\n", a, b);

        while 1 do {
            if byte i of a <> byte i of b then {
                resultis false;
            }
            if byte i of a = 0 \/ byte i of b = 0 then {
                break;
            }
            i +:= 1;
        }
        if byte i of a = 0 /\ byte i of b = 0 then {
            resultis true;
        }
        resultis false;
    }

    let strncmp(a, b, max) be {
        for i = 0 to max do
        { if byte i of a <> byte i of b then
            resultis false;
            if byte i of a = 0 then
            resultis true }
        resultis true
    }

    let strcpy(a, b) be {
        // copy from a to b;
        let i = 0;
        while 1 do {
            byte i of b := byte i of a;
            if byte i of a = 0 then {
                break;
            }
            i +:= 1;
        }
    }

    let clearBuffer(buf) be {
        for i = 0 to (bufferSize * 4) - 1 do {
            byte i of buf := '\0';
        }
    }

    let readline(buffer) be { 
        //inch() causes isues when string typed > bufferSize 
        //if statement cuts off input to the buffer when bufferSize is reached
        //but inch() will continue to stream its recorded input until its end is reached
        //this gets read as a regular terminal input and that last remaining chunk of characters gets
        //interpreted as another entry to be added to the linked list
        let character, temp;
        //clearBuffer(buffer);
        for i = 0 to bufferSize do {
            character := inch();
            //out("buffer length = %d\n", strlen(buffer));
            if character = '\n' \/ i = bufferSize then {
                byte i of buffer := '\0';
                break;
            }
            byte i of buffer := character;
        }
    }

    let printString(string) be {
        out("%s\n", string);
    }

    let newLink(data, next) be {
        //data is a pointer to a vector of characters (string), next is a pointer to another link
        //data is the address of the string, must input an address for this to work
        let r = newvec(linkSize);
        r ! data_i := data;
        r ! next_i := next;
        resultis r;
    }

    let add(string, topOfList) be {
        let cpy = strdup(string);
        let newTop;
        //out("add(%s, %d)\n", cpy, topOfList);
        newTop := newLink(cpy, topOfList);

        resultis newTop;
    }

    let remove(string, topOfList) be { //returns top of list
        let temp;
        let top = topOfList;
        let ptr = topOfList;

        test strcmp(string, top ! data_i) then {
            temp := top ! next_i;
            freevec(top ! data_i);
            freevec(top);
            resultis temp;
        }
        else {
            while ((ptr ! next_i) <> nil) do {
                test strcmp(string, (ptr ! next_i) ! data_i) then {
                    temp := ptr ! next_i;
                    ptr ! next_i := (ptr ! next_i) ! next_i;
                    freevec(temp ! data_i);
                    freevec(temp);
                    break;
                }
                else {
                    ptr := ptr ! next_i;
                }
            }
            resultis top;
        }

        resultis top;
    }

    let allListDetails(topOfList) be {
        let ptr = topOfList;
        while (ptr <> nil) do {
            out("Link\n");
            out("(0x%x) 0x%x 0d%d [%s]\n", ptr, ptr ! data_i, ptr ! data_i, ptr ! data_i);
            out("Link Chunk Data\n");
            show_chunk(ptr - 1);
            out("Link -> next\n");
            out("(0x%x) 0x%x 0d%d [%s]\n", ptr + next_i, ptr ! next_i, ptr ! next_i, ptr ! next_i);
            out("Link -> data\n");
            out("(0x%x) 0x%x 0d%d [%s]\n", ptr + data_i, ptr ! data_i, ptr ! data_i, ptr ! data_i);
            out("Link -> data Chunk Data\n");
            show_chunk((ptr ! data_i) - 1);
            out("\n");
            
            ptr := ptr ! next_i;
        }
        out("\n");
    }

    let all(topOfList) be {
        let ptr = topOfList;
        //printfrees();
        while (ptr <> nil) do {
            out("(link@0x%x)(string@0x%x)%s\n", ptr, ptr + data_i, ptr ! data_i);
            ptr := ptr ! next_i;
        }
    }

    let start() be {
        
        let top = nil, i = 1, buffer = vec((bufferSize / 4) + 1);
        let result;

        let heap = return_heap;
        let heapSizeMax = return_heapSizeMax;

        //out("heap start = 0d%d 0x%x, heapChunk start = 0d%d 0x%x, heap end = 0d%d 0x%x, heapSizeMax = 0d%d 0x%x\n", heap, heap, heap + 1, heap + 1, heap + heapSizeMax - 1, heap + heapSizeMax - 1,heapSizeMax,heapSizeMax);
        out("Enter the strings and deletions:\n");
        
        while 1 do {
            //out("before readline buffer size: %d\n", strlen(buffer));
            readline(buffer);
            //out("after readline buffer size: %d\n", strlen(buffer));
            //out("buffer = %s\n", buffer);
            if strcmp(buffer, "ALL") then {
                //out("if all\n");
                all(top);
                loop;
            }
            if strcmp(buffer, "DELETE") then {
                out("Enter word to delete\n");
                readline(buffer);
                top := remove(buffer, top);
                loop;
            }
            if strcmp(buffer, "END") then {
                //out("break\n");
                break;
                loop;
            }
            if strlen(buffer) <> 0 then {
                //out("added\n");
                top := add(buffer, top);
                //out("result: %d, data : %s, next: %d\n", result, result ! data_i, result ! next_i);
            } 
        } 
    }